// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  usersId       Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  profileImage  String?
  role          Role?          @default(USER)
  events        Event[]        @relation("userEvents")
  transactions  Transaction[]
  points        Point[]
  couponds      Coupond[]
  notifications Notification[]
  referralCode  String?        @unique
  referredBy    String?
  referredUsers Referral[]     @relation("referrer")
  referrals     Referral[]     @relation("referredUser")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Event {
  eventId           Int      @id @default(autoincrement())
  promotorId        Int
  nameEvents        String
  categoryEvents    Category
  priceEvents       String
  descriptionEvents String
  locationEvents    Location
  startDateEvents   DateTime
  endDateEvents     DateTime
  availableSeats    Int
  createdAt         DateTime @default(now())

  promotor     User          @relation("userEvents", fields: [promotorId], references: [usersId])
  transactions Transaction[]
  tickets      Ticket[]
  vouchers     Voucher[]
}

model Ticket {
  ticketId          Int        @id @default(autoincrement())
  eventId           Int
  ticketType        TicketType
  ticketPrice       Int
  quantityAvailable Int
  createdAt         DateTime   @default(now())

  event        Event         @relation(fields: [eventId], references: [eventId])
  transactions Transaction[]
}

model Transaction {
  transactionId     Int      @id @default(autoincrement())
  userId            Int
  eventId           Int
  ticketId          Int
  ticketQuantity    Int
  totalPrice        String
  pointUsed         Int
  coupondId         Int?
  voucherId         Int?
  statusTransaction String
  createdAt         DateTime @default(now())
  expiredAt         DateTime

  user    User     @relation(fields: [userId], references: [usersId])
  event   Event    @relation(fields: [eventId], references: [eventId])
  ticket  Ticket   @relation(fields: [ticketId], references: [ticketId])
  coupond Coupond? @relation(fields: [coupondId], references: [coupondId])
  voucher Voucher? @relation(fields: [voucherId], references: [voucherId])
}

model Coupond {
  coupondId Int      @id @default(autoincrement())
  userId    Int
  code      String   @unique
  discount  Int
  isUsed    Boolean  @default(false)
  expiredAt DateTime
  createdAt DateTime @default(now())

  Users        User          @relation(fields: [userId], references: [usersId])
  transactions Transaction[]
}

model Voucher {
  voucherId      Int      @id @default(autoincrement())
  eventId        Int
  code           String
  voucherAmmount Int
  expiredAt      DateTime
  createdAt      DateTime @default(now())

  event        Event         @relation(fields: [eventId], references: [eventId])
  transactions Transaction[]
}

model Referral {
  referralId     Int      @id @default(autoincrement())
  referrerId     Int
  referredUserId Int
  rewardCouponId Int
  rewardPoints   Int
  createdAt      DateTime @default(now())

  referrer     User @relation("referrer", fields: [referrerId], references: [usersId])
  referredUser User @relation("referredUser", fields: [referredUserId], references: [usersId])
}

model Point {
  pointId       Int      @id @default(autoincrement())
  userId        Int
  pointsAmmount Int
  createdAt     DateTime @default(now())
  expiredAt     DateTime

  Users User? @relation(fields: [userId], references: [usersId])
}

model Notification {
  notificationId Int      @id @default(autoincrement())
  userId         Int
  title          String
  message        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())

  Users User? @relation(fields: [userId], references: [usersId])
}

enum Role {
  USER
  PROMOTOR
}

enum Category {
  MUSIC
  SPORTS
  FOOD
  BEAUTY
}

enum Location {
  JAKARTA
  BANDUNG
  SURABAYA
  BALI
}

enum TicketType {
  PAID
  UNPAID
}
